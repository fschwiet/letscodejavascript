client-side templating with jade:
  during test (config.bundleScript = false):
    server has path set to load /views that have been jade.parse()d
    main.js maps view path so they can be required
    runtime.js is included by the generated jade templates
  on deployment (config.bundleScript = false):
    a jakefile task produces the bundle
    

  smoke test should verify list of feeds (which use the templates) load


GOAL:
  should be able to read feeds

  should have error logging when login fails using http://192.168.1.248 (hostname doesn't match configuration hostname)

  should have better error output when migrations fail (when database not found)

  should have automated rollback


TODO:

  reader page
    - on page load, a list of feeds is rendered as a JSON object
    - client-side code takes the list, and for each makes a request to load feeds.
    - that feed goes to the server, which then returns however many feed items were found
      - the feed items contain a timestamp and html field
    - the client-side code inserts the results in order

  tests are failing because they're reusing the same user.  Have test delete the googleprofile/userid association to startup.

  - MySQL connection pooling?
      https://npmjs.org/package/mysql-simple
      - stale by 2 years
      https://npmjs.org/package/easy-mysql
      - stale by 6 months
      https://npmjs.org/package/mysql-connection-pool
      - stale by 6 months
      https://npmjs.org/package/node-mysql-pooled
      - stale by 8 months

  - name it
    
LATER:
    allow users to add a feed

HMMM
    can I write a jade preprocessor for karma?
      https://gist.github.com/ryanfitz/834768
      https://github.com/karma-runner/karma/issues/565    
      - canary build of karma may allow registering a preprocessor