{
  "author": {
    "name": "Firebase.co",
    "email": "npm@firebase.co",
    "url": "http://www.firebase.co/"
  },
  "name": "express-winston",
  "description": "express.js middleware for flatiron/winston",
  "keywords": [
    "winston",
    "flatiron",
    "logging",
    "express",
    "log",
    "error",
    "handler",
    "middleware"
  ],
  "version": "0.2.0",
  "repository": {
    "url": "https://github.com/firebaseco/express-winston.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "dependencies": {
    "winston": "0.6.x"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/firebaseco/express-winston/blob/master/LICENSE"
    }
  ],
  "readme": "# express-winston\n[![Build Status](https://secure.travis-ci.org/firebaseco/express-winston.png)](http://travis-ci.org/firebaseco/express-winston)\n\n> [winston](https://github.com/flatiron/winston) middleware for express.js\n\n## Installation\n\n    npm install express-winston\n\n## Usage\n\nexpress-winston provides middlewares for request and error logging of your express.js application.  It uses 'whitelists' to select properties from the request and (new in 0.2.x) response objects.\n\n### Error Logging\n\nUse `expressWinston.errorLogger(options)` to create a middleware that log the errors of the pipeline.\n\n``` js\n    app.use(app.router); // notice how the router goes first.\n    app.use(expressWinston.errorLogger({\n      transports: [\n        new winston.transports.Console({\n          json: true,\n          colorize: true\n        })\n      ]\n    }));\n```\n\nThe logger needs to be added AFTER the express router(`app.router)`) and BEFORE any of your custom error handlers(`express.handler`). Since express-winston will just log the errors and not __handle__ them, you can still use your custom error handler like `express.handler`, just be sure to put the logger before any of your handlers.\n\n### Options\n\n``` js\n    transports: [<WinstonTransport>], // list of all winston transports instances to use.\n    level: String // log level to use, the default is \"info\".\n```\n\n### Request Logging\n\nUse `expressWinston.logger(options)` to create a middleware to log your HTTP requests.\n\n``` js\n\n    app.use(expressWinston.logger({\n      transports: [\n        new winston.transports.Console({\n          json: true,\n          colorize: true\n        })\n      ]\n    }));\n    app.use(app.router); // notice how the router goes after the logger.\n```\n\n## Examples\n\n``` js\n    var express = require('express');\n    var expressWinston = require('express-winston');\n    var winston = require('winston'); // for transports.Console\n    var app = module.exports = express.createServer();\n\n    app.use(express.bodyParser());\n    app.use(express.methodOverride());\n\n    // express-winston logger makes sense BEFORE the router.\n    app.use(expressWinston.logger({\n      transports: [\n        new winston.transports.Console({\n          json: true,\n          colorize: true\n        })\n      ]\n    }));\n\n    app.use(app.router);\n\n    // express-winston errorLogger makes sense AFTER the router.\n    app.use(expressWinston.errorLogger({\n      transports: [\n        new winston.transports.Console({\n          json: true,\n          colorize: true\n        })\n      ]\n    }));\n\n    // Optionally you can include your custom error handler after the logging.\n    app.use(express.errorLogger({\n      dumpExceptions: true,\n      showStack: true\n    }));\n\n    app.get('/error', function(req, res, next) {\n      // here we cause an error in the pipeline so we see express-winston in action.\n      return next(new Error(\"This is an error and it should be logged to the console\"));\n    });\n\n    app.get('/', function(req, res, next) {\n      res.write('This is a normal request, it should be logged to the console too');\n      res.end();\n    });\n\n    app.listen(3000, function(){\n      console.log(\"express-winston demo listening on port %d in %s mode\", app.address().port, app.settings.env);\n    });\n```\n\nBrowse `/` to see a regular HTTP logging like this:\n\n    {\n      \"req\": {\n        \"httpVersion\": \"1.1\",\n        \"headers\": {\n          \"host\": \"localhost:3000\",\n          \"connection\": \"keep-alive\",\n          \"accept\": \"*/*\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\",\n          \"accept-encoding\": \"gzip,deflate,sdch\",\n          \"accept-language\": \"en-US,en;q=0.8,es-419;q=0.6,es;q=0.4\",\n          \"accept-charset\": \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\",\n          \"cookie\": \"connect.sid=nGspCCSzH1qxwNTWYAoexI23.seE%2B6Whmcwd\"\n        },\n        \"url\": \"/\",\n        \"method\": \"GET\",\n        \"originalUrl\": \"/\",\n        \"query\": {}\n      },\n      \"res\": {\n        \"statusCode\": 200\n      },\n      \"responseTime\" : 12,\n      \"level\": \"info\",\n      \"message\": \"HTTP GET /favicon.ico\"\n    }\n\nBrowse `/error` will show you how express-winston handles and logs the errors in the express pipeline like this:\n\n    {\n      \"date\": \"Thu Jul 19 2012 23:39:44 GMT-0500 (COT)\",\n      \"process\": {\n        \"pid\": 35719,\n        \"uid\": 501,\n        \"gid\": 20,\n        \"cwd\": \"/Users/thepumpkin/Projects/testExpressWinston\",\n        \"execPath\": \"/usr/local/bin/node\",\n        \"version\": \"v0.6.18\",\n        \"argv\": [\n          \"node\",\n          \"/Users/thepumpkin/Projects/testExpressWinston/app.js\"\n        ],\n        \"memoryUsage\": {\n          \"rss\": 14749696,\n          \"heapTotal\": 7033664,\n          \"heapUsed\": 5213280\n        }\n      },\n      \"os\": {\n        \"loadavg\": [\n          1.95068359375,\n          1.5166015625,\n          1.38671875\n        ],\n        \"uptime\": 498086\n      },\n      \"trace\": [\n        ...,\n        {\n          \"column\": 3,\n          \"file\": \"Object].log (/Users/thepumpkin/Projects/testExpressWinston/node_modules/winston/lib/winston/transports/console.js\",\n          \"function\": \"[object\",\n          \"line\": 87,\n          \"method\": null,\n          \"native\": false\n        }\n      ],\n      \"stack\": [\n        \"Error: This is an error and it should be logged to the console\",\n        \"    at /Users/thepumpkin/Projects/testExpressWinston/app.js:39:15\",\n        \"    at callbacks (/Users/thepumpkin/Projects/testExpressWinston/node_modules/express/lib/router/index.js:272:11)\",\n        \"    at param (/Users/thepumpkin/Projects/testExpressWinston/node_modules/express/lib/router/index.js:246:11)\",\n        \"    at pass (/Users/thepumpkin/Projects/testExpressWinston/node_modules/express/lib/router/index.js:253:5)\",\n        \"    at Router._dispatch (/Users/thepumpkin/Projects/testExpressWinston/node_modules/express/lib/router/index.js:280:4)\",\n        \"    at Object.handle (/Users/thepumpkin/Projects/testExpressWinston/node_modules/express/lib/router/index.js:45:10)\",\n        \"    at next (/Users/thepumpkin/Projects/testExpressWinston/node_modules/express/node_modules/connect/lib/http.js:204:15)\",\n        \"    at done (/Users/thepumpkin/Dropbox/Projects/express-winston/index.js:91:14)\",\n        \"    at /Users/thepumpkin/Dropbox/Projects/express-winston/node_modules/async/lib/async.js:94:25\",\n        \"    at [object Object].log (/Users/thepumpkin/Projects/testExpressWinston/node_modules/winston/lib/winston/transports/console.js:87:3)\"\n      ],\n      \"req\": {\n        \"httpVersion\": \"1.1\",\n        \"headers\": {\n          \"host\": \"localhost:3000\",\n          \"connection\": \"keep-alive\",\n          \"cache-control\": \"max-age=0\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\",\n          \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"accept-encoding\": \"gzip,deflate,sdch\",\n          \"accept-language\": \"en-US,en;q=0.8,es-419;q=0.6,es;q=0.4\",\n          \"accept-charset\": \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\",\n          \"cookie\": \"connect.sid=nGspCCSzH1qxwNTWYAoexI23.seE%2B6WhmcwdzFEjqhMDuIIl3mAUY7dT4vn%2BkWvRPhZc\"\n        },\n        \"url\": \"/error\",\n        \"method\": \"GET\",\n        \"originalUrl\": \"/error\",\n        \"query\": {}\n      },\n      \"level\": \"error\",\n      \"message\": \"middlewareError\"\n    }\n\n## Whitelists\nNew in version 0.2.x is the ability to add whitelist elements in a route.  express-winston adds a `_routeWhitelists` object to the `req`uest, containing `.body`, `.req` and .res` properties, to which you can set an array of 'whitelist' parameters to include in the log, specific to the route in question:\n\n``` js\n    app.post('/user/register', function(req, res, next) {\n      req._routeWhitelists.body = ['username', 'email', 'age']; // But not 'password' or 'confirm-password' or 'top-secret'\n      req._routeWhitelists.res = ['_headers'];\n    });\n```\n\nPost to `/user/register` would give you something like the following:\n\n    {\n      \"req\": {\n        \"httpVersion\": \"1.1\",\n        \"headers\": {\n          \"host\": \"localhost:3000\",\n          \"connection\": \"keep-alive\",\n          \"accept\": \"*/*\",\n          \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11\",\n          \"accept-encoding\": \"gzip,deflate,sdch\",\n          \"accept-language\": \"en-US,en;q=0.8,es-419;q=0.6,es;q=0.4\",\n          \"accept-charset\": \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\",\n          \"cookie\": \"connect.sid=nGspCCSzH1qxwNTWYAoexI23.seE%2B6Whmcwd\"\n        },\n        \"url\": \"/\",\n        \"method\": \"GET\",\n        \"originalUrl\": \"/\",\n        \"query\": {},\n        \"body\": {\n          \"username\": \"foo\",\n          \"email\": \"foo@bar.com\",\n          \"age\": \"72\"\n        }\n      },\n      \"res\": {\n        \"statusCode\": 200\n      },\n      \"responseTime\" : 12,\n      \"level\": \"info\",\n      \"message\": \"HTTP GET /favicon.ico\"\n    }\n\n## Tests\n\n    npm test\n\n## Issues and Collaboration\n\n* Implement a chain of requestFilters. Currently only one requestFilter is allowed in the options.\n\nWe are accepting pull-request for these features.\n\nIf you ran into any problems, please use the project [Issues section](https://github.com/firebaseco/express-winston/issues) to search or post any bug.\n\n## Contributors\n\n* [Johan Hernandez](https://github.com/thepumpkin1979) (https://github.com/thepumpkin1979)\n* [Lars Jacob](https://github.com/jaclar) (https://github.com/jaclar)\n* [Jonathan Lomas](https://github.com/floatingLomas) (https://github.com/floatingLomas)\n\n## MIT License\n\nCopyright (c) 2012 Firebase.co and Contributors - http://www.firebase.co\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "express-winston@0.2.0",
  "dist": {
    "shasum": "ea21254d44e28a70b0b142e183654317c9730a1f"
  },
  "_from": "express-winston"
}
