var should = require('should');
var setDefault = require('../../lib/set-default');

describe('set-default', function()
{
    var person;

    describe("The state of 'person=undefined' after -> person = setDefault(person).to({name:'Jack'})", function()
    {
        it("should be equal to {name:'Jack'}", function()
        {
            person = undefined;

            person = setDefault(person).to({name:'Jack'});

            person.should.have.property('name', 'Jack');

            Object.keys(person).length.should.equal(1);
        });
    });

    describe("The state of 'person={age:23}' after -> person = setDefault(person).to({name:'Jack',age:25})", function()
    {
        it("should be equal to {name:'Jack',age:23}", function()
        {
            person = {age:23};

            setDefault(person).to({name:'Jack',age:25});

            person.should.have.property('name', 'Jack');

            person.should.have.property('age', 23);

            Object.keys(person).length.should.equal(2);
        });
    });

    describe("The state of 'person={}' after -> setDefault('age').of(person).to(29);", function()
    {
        it("should be equal to {age:29}", function()
        {
            person = {};

            setDefault('age').of(person).to(29);

            person.should.have.property('age', 29);

            Object.keys(person).length.should.equal(1);
        });
    });

    describe("The defaulting of simple objects like strings and numbers", function()
    {
        it("Should return the default value if the object is undefined", function()
        {
            var name = setDefault(name).to('Ify');

            name.should.equal('Ify')
        });

        it("Should return the object unchanged if it is not undefined", function()
        {
            var age = 10;

            age = setDefault(age).to(50);

            age.should.equal(10);
        });
    });
});


