{
  "name": "smtp-tester",
  "description": "Quick and dirty smtp server, that accepts handlers to process messages",
  "version": "0.4.8",
  "url": "http://github.com/deitch/smtp-tester",
  "author": {
    "name": "Avi Deitcher",
    "email": "avi@deitcher.net"
  },
  "contributors": [
    {
      "name": "Greg Miell",
      "url": "https://github.com/GothAck"
    }
  ],
  "engines": [
    "node >= 0.4"
  ],
  "main": "./lib/index.js",
  "dependencies": {
    "underscore": ">=1.4.4",
    "mimelib-noiconv": ">=0.1.9",
    "nodemailer": ">=0.5.0",
    "simplesmtp": ">=0.3.3"
  },
  "devDependencies": {
    "nodeunit": ">=0.8.1"
  },
  "test": "./test/test2.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/deitch/smtp-tester.git"
  },
  "readme": "smtp-tester\n===========\n\nOverview\n--------\nsmtp-tester is a simple smtp server that accepts connections, receives mail, and then calls callbacks that are bound to a particular address.\n\nInstallation\n------------\nInstallation is fairly straightforward, just install the npm module:\n\n    npm install smtp-tester\n\nStarting an SMTP server\n-----------------------\nFirst, require smtp-tester:\n\n````JavaScript\nvar ms = require('smtp-tester');\n````\n\nNext, initialize a server with a port it should listen on (yes, I know, never end a sentence in a preposition).\n\n````JavaScript\nvar mailServer = ms.init(port);\n````\n\nDone. Your SMTP server is now listening on port 'port'.\n\nSending Mail\n------------\nSend mail using any SMTP client you want. For node work, I personally use nodemailer \n\n    npm install nodemailer\n\nReceiving Mail\n--------------\nTo receive mail, bind a handler to the mailServer you created earlier.\n\n````JavaScript\nvar ms, mailServer, handler, port = 4000;\nms = require('smtp-tester');\nmailServer = ms.init(port);\nhandler = function(addr,id,email) {\n\t// do something interesting\n};\n\nmailServer.bind(\"foo@bar.com\",handler);\n````\n\nDone. Every mail sent to foo@bar.com (and every one sent before binding) will call the handler exactly once.\n\nYou can have as many handlers as you want, they are all executed, even for the same address. However, execution order, while usually in the order in which they were added, is not guaranteed.\n\n# Catch-All Handlers\nIf you want a handler to catch every email that is sent through the system, just bind with no address at all.\n\n````JavaScript\nhandler = function(addr,id,email) {\n\t// do something interesting\n\t// because this is a catch-all, the addr will be null\n};\nmailServer.bind(handler);\n````\n\nCatch-All handlers are *always* run before specific handlers.\n\n\nStopping Receipt\n----------------\nTo stop receiving mail at a particular handler, just unbind.\n\n````JavaScript\nmailServer.unbind(\"foo@bar.com\",handler);\n````\n\n# Catch-All Handlers\nIf you want to remove a catch-all handler that catches every email that is sent through the system, just unbind with no address at all.\n\n````JavaScript\nhandler = function(addr,id,email) {\n\t// do something interesting\n\t// because this is a catch-all, the addr will be null\n};\nmailServer.bind(handler); // this adds it\nmailServer.unbind(handler); // this removes it\n````\n\nRemoving Messages\n-----------------\nTo remove messages from the mail server, you can remove an individual message or all of them:\n\n````JavaScript\nmailServer.remove(id);\nmailServer.removeAll();\n````\n\nStopping the Server\n-------------------\nSurprisingly, the method is just called \"stop\".\n\n````JavaScript\nmailServer.stop();\n````\n\nHandlers\n--------\nHandlers that receive mail are passed three parameters.\n\n* addr: Address to which the email was addressed, and for which the handler was bound. If this is a catch-all handler, then this is null.\n* id: Internal ID of the email in this mail server process. Useful for removing messages or checking against something in our cache.\n* email: JavaScript object of the email, containing \"sender\", \"receivers\", \"data\" (raw text), \"headers\" and \"body\".\n\nSample email object is as follows, taken from the test.js included with the package.\n\n````JavaScript\n{ sender: { address: '<mailtest@bar.com>', valid: true },\n  receivers: { 'foo@bar.com': true },\n  data: 'X-Mailer: Nodemailer (0.2.3; +http://www.nodemailer.org)\\r\\nDate: Thu, 01 Dec 2011 10:24:01 GMT\\r\\nFrom: mailtest@bar.com\\r\\nTo: foo@bar.com\\r\\nSubject: email test\\r\\nMIME-Version: 1.0\\r\\nContent-Type: text/plain; charset=UTF-8\\r\\nContent-Transfer-Encoding: quoted-printable\\r\\n\\r\\nThis is a test mail\\r\\n',\n  headers: \n   { 'X-Mailer': 'Nodemailer (0.2.3; +http://www.nodemailer.org)',\n     Date: 'Thu, 01 Dec 2011 10:24:01 GMT',\n     From: 'mailtest@bar.com',\n     To: 'foo@bar.com',\n     Subject: 'email test',\n     'MIME-Version': '1.0',\n     'Content-Type': 'text/plain; charset=UTF-8',\n     'Content-Transfer-Encoding': 'quoted-printable' },\n  body: 'This is a test mail\\r\\n' }\n````\n\nModules\n-------\nsmtp-tester supports pre-shipped modules. They are named and can be run by calling\n\n````JavaScript\nvar success;\n// to load a module\nsuccess = mailServer.module(name);\n\n// to unload a module\nmailServer.unmodule(name);\n````\n\nIf the module successfully loads, it will return success, else it will return false.\n\nThe following modules are currently available.\n\n* logAll: logs every message received to the console in a text format close to raw text.\n\nMore are expected to follow.\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "smtp-tester@0.4.8",
  "_from": "smtp-tester"
}
